{"version":3,"sources":["components/Place.js","components/ClientList.js","components/Form.js","index.js"],"names":["Place","parentCallback","placeInputRef","useRef","useState","place","setPlace","useEffect","handleAPI","autocomplete","window","google","maps","places","Autocomplete","current","event","addListener","getPlace","postCode","city","country","house","address_components","component","types","short_name","long_name","address","formatted_address","id","type","ref","ClientList","clientList","listItems","map","d","className","name","surname","email","onClick","length","Form","form","setForm","formErrors","setFormErrors","clientArr","JSON","parse","localStorage","getItem","console","log","clients","setClients","concat","setItem","stringify","handleChange","e","field","target","value","Object","keys","includes","errorMsg","validateField","test","onChange","onBlur","errorMsgAddress","errorMsgCountry","errorMsgCity","errorMsgHouse","errorMsgPostCode","errorObj","validateFunc","x","msg","validateForm","Math","random","toString","substr","setTimeout","document","getElementById","reducedArr","index","i","splice","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.c82af8a8.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst Place = ({ parentCallback }) => {\r\n    const placeInputRef = useRef(null);\r\n    const [place, setPlace] = useState(null);\r\n\r\n    useEffect(() => {\r\n        handleAPI();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        parentCallback(place);\r\n    }, [place]);\r\n\r\n    //initialize google places api\r\n    const handleAPI = () => {\r\n        let autocomplete = new window.google.maps.places.Autocomplete(placeInputRef.current);\r\n        new window.google.maps.event.addListener(autocomplete, \"place_changed\", function () {\r\n            let place = autocomplete.getPlace();\r\n            let postCode = \"\";\r\n            let city = \"\";\r\n            let country = \"\";\r\n            let house = \"\";\r\n\r\n            //Getting required values\r\n            for (const component of place.address_components) {\r\n                const componentType = component.types[0];\r\n\r\n                switch (componentType) {\r\n                    case \"street_number\": {\r\n                        house = component.short_name;\r\n                        break;\r\n                    }\r\n\r\n                    case \"postal_code\": {\r\n                        postCode = component.short_name;\r\n                        break;\r\n                    }\r\n\r\n                    case \"locality\": {\r\n                        city = component.short_name;\r\n                        break;\r\n                    }\r\n\r\n                    case \"country\": {\r\n                        country = component.long_name;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Saving required values to state\r\n            setPlace({\r\n                address: place.formatted_address,\r\n                country: country,\r\n                city: city,\r\n                house: house,\r\n                postCode: postCode\r\n            });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input id=\"placeInput\" type=\"text\" ref={placeInputRef} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Place;","import React from \"react\";\r\n\r\nconst ClientList = ({ parentCallback, clientList }) => {\r\n    const listItems = clientList.map((d) =>\r\n        <li key={d.id}>\r\n            <div className=\"client-group\">\r\n                <div className=\"list-text\">{d.name} {d.surname}</div>\r\n                <div className=\"list-text\">{d.email}</div>\r\n                <div className=\"list-text\">{d.address}</div>\r\n                <div className=\"list-text\">{d.country}</div>\r\n                <div className=\"list-text\">{d.city}</div>\r\n                <div className=\"list-text\">{d.house}</div>\r\n                <div className=\"list-text\">{d.postCode}</div>\r\n\r\n                <button onClick={() => parentCallback(d.id)}>Delete Client</button>\r\n            </div>\r\n        </li>);\r\n\r\n    //Method to show or not show client list\r\n    const countClients = () => {\r\n        if (clientList.length === 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {countClients() && <div className=\"form-box\">\r\n                <p className=\"title\">Client List</p>\r\n                {listItems}\r\n            </div>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ClientList;","import React, { useEffect, useState } from 'react';\r\nimport Place from './Place';\r\nimport ClientList from './ClientList';\r\n\r\nconst Form = () => {\r\n    //Declaring component state and default values\r\n    const [form, setForm] = useState(\r\n        {\r\n            id: null,\r\n            name: \"\",\r\n            surname: \"\",\r\n            email: \"\",\r\n            address: \"\",\r\n            country: \"\",\r\n            city: \"\",\r\n            house: \"\",\r\n            postCode: \"\"\r\n        });\r\n\r\n    const [formErrors, setFormErrors] = useState(\r\n        {\r\n            name: null,\r\n            surname: null,\r\n            email: null,\r\n            address: null,\r\n            country: null,\r\n            city: null,\r\n            house: null,\r\n            postCode: null\r\n        });\r\n\r\n    const [clients, setClients] = useState(() => {\r\n        const clientArr = JSON.parse(window.localStorage.getItem('clients'));\r\n        console.log(clientArr);\r\n        if (clientArr) {\r\n            return clientArr;\r\n        } else {\r\n            return [];\r\n        }\r\n    });\r\n\r\n    //Effect hooks for when particular state changes\r\n    useEffect(() => {\r\n        if (form.id) {\r\n            setClients(clients.concat([form]));\r\n        }\r\n    }, [form.id]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('clients', JSON.stringify(clients));\r\n    }, [clients]);\r\n\r\n    //Place component callback\r\n    const callbackPlace = (place) => {\r\n        if (place) {\r\n            setForm({\r\n                ...form,\r\n                address: place.address,\r\n                country: place.country,\r\n                city: place.city,\r\n                house: place.house,\r\n                postCode: place.postCode\r\n            });\r\n\r\n            // for (const [key, value] of Object.entries(place)) {\r\n            //     const errorMsg = validateField(key, value);\r\n            //     setFormErrors({ ...formErrors, [key]: errorMsg });\r\n            // }\r\n            const errorMsgAddress = validateField(\"address\", place.address);\r\n            const errorMsgCountry = validateField(\"country\", place.country);\r\n            const errorMsgCity = validateField(\"city\", place.city);\r\n            const errorMsgHouse = validateField(\"house\", place.house);\r\n            const errorMsgPostCode = validateField(\"postCode\", place.postCode);\r\n            setFormErrors({\r\n                ...formErrors,\r\n                address: errorMsgAddress,\r\n                country: errorMsgCountry,\r\n                city: errorMsgCity,\r\n                house: errorMsgHouse,\r\n                postCode: errorMsgPostCode,\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    //Deleting state method with child callback\r\n    const callbackList = (id) => {\r\n        const reducedArr = clients;\r\n        let index = 0;\r\n        for (let i = 0; i < reducedArr.length; i++) {\r\n            if (reducedArr[i].id === id) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        reducedArr.splice(index, 1);\r\n        setClients([...reducedArr]);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        let field = e.target.name;\r\n\r\n        setForm({ ...form, [field]: e.target.value });\r\n\r\n        if (!Object.keys(formErrors).includes(field)) return;\r\n        const errorMsg = validateField(field, e.target.value);\r\n        setFormErrors({ ...formErrors, [field]: errorMsg });\r\n    }\r\n\r\n\r\n\r\n    const validateField = (name, value) => {\r\n        let errorMsg = null;\r\n\r\n        switch (name) {\r\n            case \"name\":\r\n                if (!value) errorMsg = \"Please enter Name.\";\r\n                break;\r\n            case \"surname\":\r\n                if (!value) errorMsg = \"Please enter Surname.\";\r\n                break;\r\n            case \"email\":\r\n                if (!value) errorMsg = \"Please enter Email.\";\r\n                else if (!/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(value))\r\n                    errorMsg = \"Please enter valid Email.\";\r\n                break;\r\n            case \"address\":\r\n                if (!value) errorMsg = \"Please enter Address.\";\r\n                break;\r\n            case \"country\":\r\n                if (!value) errorMsg = \"Please enter Country.\";\r\n                break;\r\n            case \"city\":\r\n                if (!value) errorMsg = \"Please enter City.\";\r\n                break;\r\n            case \"house\":\r\n                if (!value) errorMsg = \"Please enter House No.\";\r\n                else if (/[^$,\\.\\d]/.test(value))\r\n                    errorMsg = \"Please enter valid House No(numbers only).\";\r\n                break;\r\n            case \"postCode\":\r\n                if (!value) errorMsg = \"Please enter Post Code.\";\r\n                else if (/[^$,\\.\\d]/.test(value))\r\n                    errorMsg = \"Please enter valid Post Code(numbers only).\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorMsg;\r\n    };\r\n\r\n    const validateForm = (form, formErrors, validateFunc) => {\r\n        const errorObj = {};\r\n        Object.keys(formErrors).map(x => {\r\n            const msg = validateFunc(x, form[x]);\r\n            if (msg) errorObj[x] = msg;\r\n        });\r\n        return errorObj;\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        var ID = () => {\r\n            return '_' + Math.random().toString(36).substr(2, 9);\r\n        };\r\n\r\n        const errorObj = validateForm(form, formErrors, validateField);\r\n        if (Object.keys(errorObj).length !== 0) {\r\n            setFormErrors(errorObj);\r\n            return false;\r\n        }\r\n\r\n        //Setting id to form state before submiting\r\n        setForm({ ...form, id: ID() });\r\n\r\n        //Clear form\r\n        setTimeout(() => {\r\n            setForm({\r\n                id: null,\r\n                name: \"\",\r\n                surname: \"\",\r\n                email: \"\",\r\n                address: \"\",\r\n                country: \"\",\r\n                city: \"\",\r\n                house: \"\",\r\n                postCode: \"\"\r\n            });\r\n            document.getElementById('placeInput').value = \"\";\r\n        }, 500);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"form-box\">\r\n                <p className=\"title\">Add Cient</p>\r\n                <div className=\"form-group\">\r\n                    <label>\r\n                        Name:<span className=\"asterisk\">*</span>\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={form.name}\r\n                        onChange={handleChange}\r\n                        onBlur={handleChange}\r\n                    />\r\n                    {formErrors.name && <span className=\"err\">{formErrors.name}</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>\r\n                        Surname:<span className=\"asterisk\">*</span>\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"surname\"\r\n                        value={form.surname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleChange}\r\n                    />\r\n                    {formErrors.name && <span className=\"err\">{formErrors.surname}</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>\r\n                        Email:<span className=\"asterisk\">*</span>\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"email\"\r\n                        value={form.email}\r\n                        onChange={handleChange}\r\n                        onBlur={handleChange}\r\n                    />\r\n                    {formErrors.email && <span className=\"err\">{formErrors.email}</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Address search:</label>\r\n                    <Place parentCallback={callbackPlace} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Address:<span className=\"asterisk\">*</span></label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"address\"\r\n                        value={form.address}\r\n                        onChange={handleChange}\r\n                        onBlur={handleChange}\r\n                    />\r\n                    {formErrors.address && <span className=\"err\">{formErrors.address}</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Country:<span className=\"asterisk\">*</span></label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"country\"\r\n                        value={form.country}\r\n                        onChange={handleChange}\r\n                        onBlur={handleChange}\r\n                    />\r\n                    {formErrors.country && <span className=\"err\">{formErrors.country}</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>City:<span className=\"asterisk\">*</span></label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"city\"\r\n                        value={form.city}\r\n                        onChange={handleChange}\r\n                        onBlur={handleChange}\r\n                    />\r\n                    {formErrors.city && <span className=\"err\">{formErrors.city}</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>House no:<span className=\"asterisk\">*</span></label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"house\"\r\n                        value={form.house}\r\n                        onChange={handleChange}\r\n                        onBlur={handleChange}\r\n                    />\r\n                    {formErrors.house && <span className=\"err\">{formErrors.house}</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Post Code:<span className=\"asterisk\">*</span></label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"postCode\"\r\n                        value={form.postCode}\r\n                        onChange={handleChange}\r\n                        onBlur={handleChange}\r\n                    />\r\n                    {formErrors.postCode && <span className=\"err\">{formErrors.postCode}</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <button onClick={handleSubmit}>Submit</button>\r\n                </div>\r\n            </div>\r\n            <ClientList parentCallback={callbackList} clientList={clients} />\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Form from './components/Form';\n\nconst App = () => {\n  return (\n    <div className='container'>\n      <Form />\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)"],"sourceRoot":""}